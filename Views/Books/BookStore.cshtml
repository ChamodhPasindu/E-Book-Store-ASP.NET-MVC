@model IEnumerable<EBookStore.Models.Book>

<div class="container mt-4">
	<!-- Title Section -->
	<div class="row">
		<div class="col-md-12">
			<h2 class="text-center text-uppercase display-6 fw-bold">Our Collection</h2>
			<p class="text-center text-muted">Explore a wide range of books from different genres.</p>
		</div>
	</div>

	<!-- Search Field -->
	<div class="row mb-4">
		<div class="col-md-6 mx-auto">
			<div class="input-group shadow-sm">
				<input type="text" id="searchInput" class="form-control border-0" placeholder="Search books by title or author" />
				<div class="input-group-append">
					<span class="input-group-text bg-dark text-white border-0">
						<i class="bi bi-search"></i>
					</span>
				</div>
			</div>
		</div>
	</div>

	<!-- No books message (initially hidden) -->
	<div class="row mb-4" id="noBooksMessage" style="display: none;">
		<div class="col-md-12 text-center">
			<p class="alert alert-warning">No books found.</p>
		</div>
	</div>

	<!-- Book Cards Section -->
	<div class="row" id="bookCards">
		@if (!Model.Any())
		{
			<div class="col-md-12 text-center">
				<p class="alert alert-warning">No books available.</p>
			</div>
		}
		else
		{
			@foreach (var book in Model)
			{
				var averageRating = book.FeedBacks.Any() ? book.FeedBacks.Average(f => f.Rating) : 0; // Calculate average rating
				<div class="col-md-3 mb-4 book-card">
					<div class="card h-100 border-0 shadow-sm">
						<!-- Book Image -->
						<img src="data:@book.ImageMimeType;base64,@Convert.ToBase64String(book.ImageData!)" class="card-img-top" alt="@book.Title" style="height: 300px; object-fit: contain; border-radius: 5px 5px 0 0;" />

						<!-- Book Info -->
						<div class="card-body text-center">
							<h5 class="card-title fw-bold">@book.Title</h5>
							<p class="card-text text-muted">@book.Author</p>
							<p class="card-text fw-bold text-secondary">@book.Price.ToString("C", new System.Globalization.CultureInfo("en-LK"))</p>

							<!-- Average Rating -->
							<div class="mb-2">
								@for (var i = 1; i <= 5; i++)
								{
									@if (i <= averageRating)
									{
										<!-- Full Star -->
										<i class="bi-star-fill" style="color: #FFD700;"></i>
									}
									else
									{
										<!-- Empty Star -->
										<i class="bi-star" style="color: #FFD700;"></i>
									}
								}
								<span class="text-muted">(@book.FeedBacks.Count())</span>
							</div>

							<!-- Quantity Control -->
							<div class="input-group mb-3 justify-content-center">
								<button class="btn btn-outline-secondary" type="button" onclick="decreaseQuantity(@book.BookID)">-</button>
								<input type="text" id="quantity_@book.BookID" class="form-control text-center" value="1" max="@book.QuantityInStock" style="width: 50px;" readonly />
								<button class="btn btn-outline-secondary" type="button" onclick="increaseQuantity(@book.BookID,@book.QuantityInStock)">+</button>
							</div>
						</div>

						<!-- Buttons -->
						<div class="card-footer bg-transparent border-0 mb-2">
							<div class="d-grid gap-2 d-md-flex justify-content-md-evenly">
								<button class="btn btn-outline-danger" onclick="addToCart(@book.BookID)">
									<i class="bi-cart"></i> Add to Cart
								</button>
								<a href="@Url.Action("BookDetail", "Books", new { id = book.BookID })" class="btn btn-outline-secondary">
									<i class="bi-book"></i> View Book
								</a>
							</div>
						</div>
					</div>
				</div>
			}
		}
	</div>
</div>

@section Scripts {
	<script>

		// Increase quantity function
		function increaseQuantity(bookId, availableQty) {
			var quantityInput = document.getElementById("quantity_" + bookId);
			var currentQuantity = parseInt(quantityInput.value);
			if (currentQuantity < availableQty) {
				quantityInput.value = currentQuantity + 1;
			}

		}

		// Decrease quantity function
		function decreaseQuantity(bookId) {
			var quantityInput = document.getElementById("quantity_" + bookId);
			var currentQuantity = parseInt(quantityInput.value);
			if (currentQuantity > 1) {
				quantityInput.value = currentQuantity - 1;
			}
		}

		$(document).ready(function () {
			$('#searchInput').on('keyup', function () {
				var value = $(this).val().toLowerCase();
				var hasVisibleBooks = false;

				$('#bookCards .book-card').filter(function () {
					var isVisible = $(this).text().toLowerCase().indexOf(value) > -1;
					$(this).toggle(isVisible);

					if (isVisible) {
						hasVisibleBooks = true;
					}
				});

				// Show or hide "no books found" message
				if (hasVisibleBooks) {
					$('#noBooksMessage').hide();
				} else {
					$('#noBooksMessage').show();
				}
			});

			// Initially hide "no books found" if there are books
			if ($('#bookCards .book-card').length > 0) {
				$('#noBooksMessage').hide();
			} else {
				$('#noBooksMessage').show();
			}
		});

		function addToCart(bookId) {
			var quantity = document.getElementById("quantity_" + bookId);

			$.ajax({
				url: '/Order/AddToCart',
				type: 'POST',
				data: { bookId: bookId, quantity: parseInt(quantity.value) },
				success: function (response) {
					alert('Book added to cart!');
					location.reload();
				},
				error: function (xhr, status, error) {
					alert('Error adding book to cart: ' + error);
				}
			});
		}
	</script>
}
